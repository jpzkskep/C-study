포인터 정리
p=&a;

*p=3;

p에 변수a의주소 집어넣음

*p를통해 나에 저장된주소(변수a의주소)에 해당하는 데이터(변수a)로 생각하시오 //

p = &a; → p에 변수 a의 주소를 집어넣는다

*p = 3; → p에 저장된 주소(=a의 주소)를 따라가서

그 위치에 있는 데이터를 바꾼다 (즉, a = 3)

→ 따라서 *p는 p가 가리키는 변수(a)의 값이다 //

#include <stdio.h>

int main() { int a = 10, b = 20, c = 30;

const int* p1 = &a;
int* const p2 = &b;
const int* const p3 = &c;

*p1 = 100;   // (1)
p1 = &b;     // (2)

*p2 = 200;   // (3)
p2 = &c;     // (4)

*p3 = 300;   // (5)
p3 = &a;     // (6)

return 0;
} /* p1은 const int를 가르키는 포인터, const 가 int 왼쪽에 있으므로 값 변경 불가 p2은 int를 가르키는 const 포인터, const p2(p2은 주소)이므로 주소 변경 불가 
p3은 const int를 가르키는 const 포인터, const가 int 왼쪽에 있으므로 값 변경 불가, const p3(p3은 주소)이므로 주소 변경 불가 컴파일 에러가 나는 줄은 1,4,5,6 */

//포인터의 덧셉
#include <stdio.h>
int main() {
	int a;
	int* pa;
	pa = &a;
	printf("pa의 값 : %p\n", pa);
	printf("(pa+1)의 값 : %p\n", pa + 1);
	return 0;
}
왜 이런 동작이 생기나?
C에서는 포인터에 숫자를 더하면 그 자료형 크기만큼 곱해진 거리를 이동:

pa + 1 → pa + 1 * sizeof(int)

char* pc; pc + 1 → 1바이트 이동

double* pd; pd + 1 → 8바이트 이동 (보통)

배열 요소	주소 (hex)	차이 (바이트)
arr[0]	0x7ffeb5683890	-
arr[1]	0x7ffeb5683894	+4
arr[2]	0x7ffeb5683898	+4
arr[3]	0x7ffeb568389c	+4

이건 *(arr + i)가 arr[i]와 같은 의미 arr+i는 &arr[i]와 같은 의미

C언어상에서 배열의이름이 sizeof 연산자나 주소값연산자(&)와 사용될때 (예를 들어&arr) 경우를빼면,
배열의 이름을 사용시 암묵적으로 첫번째 원소를 가리키는 포인터로 타입변환
3[arr]같은건 *(3+arr)로 자동으로 바꿔짐
